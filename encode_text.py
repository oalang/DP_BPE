"""
Uses a BPE model to breakup a text file into subwords and writes the result to an output file
"""

import argparse

from bpe import Vocabulary, BPEModel


class Arguments:
    def __init__(self, args):
        self.bpe_model_fname = args.bpe_model
        self.text_fname = args.text
        self.subword_fname = args.output

    def valid(self):
        return self.bpe_model_fname is not None and self.text_fname is not None and self.subword_fname is not None

    @staticmethod
    def get_parser():
        parser = argparse.ArgumentParser(description=__doc__)
        parser.add_argument("--bpe-model",
                            help="file path for BPE model",
                            type=str)
        parser.add_argument("--text",
                            help="file path for text being processed",
                            type=str)
        parser.add_argument("--output",
                            help="file path for subword output",
                            type=str)
        return parser

    def invalid_opts(self):
        message = ""
        if self.bpe_model_fname is None:
            message += "BPE model file must be specified\n"
        if self.text_fname is None:
            message += "Text file must be specified\n"
        if self.subword_fname is None:
            message += "Output file must be specified\n"
        return message


def encode_text(args):
    model_fname = args.bpe_model_fname
    text_fname = args.text_fname
    subword_fname = args.subword_fname

    # Load the BPE model from a file.
    with open(model_fname, 'r') as model_file:
        model = BPEModel.from_model_file(model_file)

    # Break up each word in a text file into subwords. The first time a word a is seen, a subword
    # mapping is generated by applying the model and added to a vocabulary. Subsequent instances are
    # looked up in the vocabulary. Write the results to a file.
    with open(text_fname, 'r') as text_file, open(subword_fname, 'w') as subword_file:
        vocabulary = Vocabulary()
        for line in text_file:
            encodings = []
            for token in line.split():
                if vocabulary.missing(token):
                    vocabulary.add_word(token, model)
                encodings.append(vocabulary.map_to_subwords(token))
            subword_file.write(' '.join(encodings) + "\n")


def main():
    parser = Arguments.get_parser()
    args = Arguments(parser.parse_args())
    if args.valid():
        encode_text(args)
    else:
        print("Error: Invalid Options\n" + args.invalid_opts())


if __name__ == '__main__':
    main()
